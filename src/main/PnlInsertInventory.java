/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import injection.Inject;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import util.SUtility;

/**
 *
 * @author Phantom
 */
public class PnlInsertInventory extends javax.swing.JPanel {

    /**
     * Creates new form PnlInsertInventory
     */
    private Connection myConn = null;
    private PreparedStatement myStmt = null;
    private ResultSet myRs = null;

    Inject inject;

    public PnlInsertInventory(Connection conn, Inject inject) {
        initComponents();
        myConn = conn;
        this.inject = inject;
    }

    public void insertToTable(String code, String description, Double price, Integer opening, Integer in, Integer out) {
        int ending = 0;
        double value = 0;
        ending = opening + in - out;
        value = price * ending;
        Object data[] = {code,
            description,
            price,
            opening,
            in,
            out, ending, value
        };
        DefaultTableModel tableModel = (DefaultTableModel) tblInsertInventory.getModel();
        tableModel.addRow(data);
    }
    
    private void saveToDatabase(){
        try {
            myStmt = myConn.prepareStatement("delete from inventory where extract(month from date)=? && "
                    + "extract(year from date)=?;");
            myStmt.setInt(1, inject.getMonth());
            myStmt.setInt(2, inject.getYear());

            // Execute SQL query
            myStmt.executeUpdate();
            System.out.println("delete");
            // Prepare statement

            for (int i = 0; i < tblInsertInventory.getRowCount(); i++) {
                // Prepare statement

                myStmt = myConn.prepareStatement("INSERT INTO `akuntansi`.`inventory`"
                        + " (`Id`, `Description`, `Price`, `Opening`, `In`, `Out`, `Ending`, `Value`, `Date`)"
                        + " VALUES (?,?,?,?,?,?,?,?,?);");
                myStmt.setString(1, tblInsertInventory.getValueAt(i, 0).toString());
                myStmt.setString(2, tblInsertInventory.getValueAt(i, 1).toString());
                myStmt.setString(3, tblInsertInventory.getValueAt(i, 2).toString());
                myStmt.setString(4, tblInsertInventory.getValueAt(i, 3).toString());
                myStmt.setString(5, tblInsertInventory.getValueAt(i, 4).toString());
                myStmt.setString(6, tblInsertInventory.getValueAt(i, 5).toString());
                myStmt.setString(7, tblInsertInventory.getValueAt(i, 6).toString());
                myStmt.setString(8, tblInsertInventory.getValueAt(i, 7).toString());
                myStmt.setString(9, inject.getYear()+"-"+inject.getMonth()+"-28");
                
                // Execute SQL query
                myStmt.executeUpdate();
                System.out.println("add");

            }

        } catch (SQLException ex) {
            Logger.getLogger(PnlInsertInventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void generateTable(){
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblInsertInventory.getModel();
            for (int i = tblInsertInventory.getRowCount() - 1; i >= 0; i--) {
                tableModel.removeRow(i);
            }

            myStmt = myConn.prepareStatement("select * from inventory where extract(month from date)=? && "
                    + "extract(year from date)=?;");
            // Execute SQL query
            myStmt.setInt(1, inject.getMonth());
            myStmt.setInt(2, inject.getYear());
            myRs = myStmt.executeQuery();

            // Process result set
            while (myRs.next()) {
                Object data[] = {myRs.getString("id"), myRs.getString("description"),
                    myRs.getDouble("price"),myRs.getInt("opening"),myRs.getInt("in"),
                    myRs.getInt("out"),myRs.getInt("ending"),myRs.getDouble("value")};
                tableModel.addRow(data);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PnlViewInventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInsertInventory = new javax.swing.JTable();
        btnInventoryInsert = new javax.swing.JButton();
        btnInventoryDelete = new javax.swing.JButton();
        btnInventorySave = new javax.swing.JButton();

        tblInsertInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Description", "Price", "Opening", "In", "Out", "Ending", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInsertInventory);
        if (tblInsertInventory.getColumnModel().getColumnCount() > 0) {
            tblInsertInventory.getColumnModel().getColumn(0).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(1).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(2).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(3).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(4).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(5).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(6).setResizable(false);
            tblInsertInventory.getColumnModel().getColumn(7).setResizable(false);
        }

        btnInventoryInsert.setText("Insert");
        btnInventoryInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInventoryInsertActionPerformed(evt);
            }
        });

        btnInventoryDelete.setText("delete");
        btnInventoryDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInventoryDeleteActionPerformed(evt);
            }
        });

        btnInventorySave.setText("Save");
        btnInventorySave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInventorySaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 625, Short.MAX_VALUE)
                        .addComponent(btnInventoryInsert)
                        .addGap(78, 78, 78)
                        .addComponent(btnInventoryDelete)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(394, 394, 394)
                .addComponent(btnInventorySave)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInventoryInsert)
                    .addComponent(btnInventoryDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnInventorySave)
                .addGap(76, 76, 76))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnInventoryInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInventoryInsertActionPerformed
        DlgAddInventory dlgAddInventory = new DlgAddInventory(this, true, myConn);
        dlgAddInventory.setVisible(true);
    }//GEN-LAST:event_btnInventoryInsertActionPerformed

    private void btnInventoryDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInventoryDeleteActionPerformed
        int row = tblInsertInventory.getSelectedRow();
        if (row >= 0) {
            DefaultTableModel tableModel = (DefaultTableModel) tblInsertInventory.getModel();
            tableModel.removeRow(row);
        }else{
            SUtility.msg(this, "Select A Row!");
        }
    }//GEN-LAST:event_btnInventoryDeleteActionPerformed

    private void btnInventorySaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInventorySaveActionPerformed
        int x = SUtility.msq(this, "Are you sure?");
            if (x == 0) {
                saveToDatabase();
            }
    }//GEN-LAST:event_btnInventorySaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInventoryDelete;
    private javax.swing.JButton btnInventoryInsert;
    private javax.swing.JButton btnInventorySave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInsertInventory;
    // End of variables declaration//GEN-END:variables
}
